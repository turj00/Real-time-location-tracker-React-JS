{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","useState","setMyMap","lat","latitude","lng","longitude","center","open","setOpen","isLoaded","useLoadScript","googleMapsApiKey","process","name","setName","coordinates","setCoordinates","mapContainerStyle","height","width","margin","zoom","onLoad","map","position","onClick","onCloseClick","id","style","padding","placeholder","onChange","event","target","value","Button","variant","type","console","log","App","state","getLocation","bind","getCordinates","navigator","geolocation","getCurrentPosition","this","handleLocationError","alert","setState","coords","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","className","display","alignItems","justifyContent","flexDirection","color","Alert","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.473cddcd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from '@react-google-maps/api'\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n  const Map = (props) => {\r\n  const [ myMap, setMyMap ] = useState(null);\r\n  const [ center, setCenter ] = useState({ lat: props.latitude, lng: props.longitude});\r\n  \r\n  const [ open, setOpen ] = useState(false);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\r\n  });\r\n\r\n  const [name, setName] = useState('');\r\n  const [coordinates, setCoordinates] = useState('');\r\n\r\n  const renderMap = () => (\r\n\r\n        <GoogleMap\r\n\r\n          mapContainerStyle={{\r\n            height: \"100vh\",\r\n            width: \"100vw\",\r\n            margin: \"30px\",\r\n          }}\r\n          zoom={3}\r\n          center={center}\r\n          onLoad={map => setMyMap(map)}\r\n        >\r\n\r\n        <Marker position={{lat: props.latitude, lng: props.longitude }} onClick={() => \r\n            \r\n                  setOpen(true)\r\n                  }></Marker>\r\n\r\n                  {open &&(\r\n\r\n                <InfoWindow position={{lat: props.latitude, lng: props.longitude }} onCloseClick={ () =>{\r\n\r\n                  setOpen(false);\r\n\r\n                  }} >\r\n\r\n                    <div> \r\n\r\n                        <input id=\"coordinates\" style={{ margin:\"9px\", padding:\"9px\"}} placeholder=\"Enter coordinates\" onChange={event => \r\n                            setCoordinates(event.target.value)}> \r\n\r\n                        </input>\r\n\r\n                        <input id=\"name\"  style={{ margin:\"9px\", padding:\"9px\"}} placeholder=\"Enter your name\"  onChange={event => \r\n                            setName(event.target.value)}>\r\n\r\n                        </input>\r\n\r\n                        <Button variant=\"success\" type=\"submit\"  onClick={()=>{console.log(\"Your current coordinates: \"+ coordinates +'\\n'+\"Your Name: \"+name)}} > Submit\r\n\r\n                        </Button>\r\n                        \r\n\r\n                    </div>\r\n                    \r\n\r\n                </InfoWindow>\r\n                \r\n\r\n                  )}\r\n\r\n\r\n       </GoogleMap>\r\n        \r\n  )\r\n\r\n  return isLoaded ? renderMap() : null;\r\n}\r\n\r\nexport default Map","import React from 'react';\n\nimport './App.css';\n\nimport Map from './components/Map'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Button from 'react-bootstrap/Button';\n\nimport Alert from 'react-bootstrap/Alert';\n\n\nclass App extends React.Component{\nconstructor (props){\n\n  super(props);\n  this.state = {\n\n    latitude:51.1657,\n    longitude: 10.4515,\n    \n  };\n\nthis.getLocation = this.getLocation.bind(this)\nthis.getCordinates= this.getCordinates.bind(this)\n\n}\n \n  getLocation() {\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.getCordinates, this.handleLocationError);\n\n    } else {\n\n      alert( \"Geolocation is not supported by this browser.\");\n\n    }\n\n }\n\n  getCordinates(position) {\n\n   // console.log(position);\n\n   this.setState({\n\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n\n\n    })\n\n  }\n  \n\n handleLocationError(error) {\n    switch(error.code) {\n      case error.PERMISSION_DENIED:\n        alert( \"User denied the request for Geolocation.\")\n        break;\n      case error.POSITION_UNAVAILABLE:\n        alert( \"Location information is unavailable.\")\n        break;\n      case error.TIMEOUT:\n        alert( \"The request to get user location timed out.\")\n        break;\n      case error.UNKNOWN_ERROR:\n        alert(\"An unknown error occurred.\")\n        break;\n      \n      default:\n        alert(\"An unknown error occurred.\")\n    }\n  }\n\n    render(){\n\n      return (\n\n      <div className=\"App\">\n\n        <h2 style={{margin: \"20px\", padding: \"20px\", display: \"flex\", alignItems: \"center\",justifyContent: \"center\",\n            flexDirection: \"column\", color:\"green\"}}>\n\n         <b> <u>Click on the \"Get coordinates\" button to get your current location's coordinates </u> </b> \n\n        </h2>\n        <br/>\n       \n        <Button variant=\"info\"  onClick={this.getLocation}>Get coordinates</Button>\n        \n        <br/>\n        <br/>\n        \n        <h3><p><b> Current latitude:</b> {this.state.latitude}</p>\n        <p> <b> Current longitude: </b> {this.state.longitude}</p></h3>\n \n        <Alert key={5} variant={'warning'}>\n         To view the map in fullscreen please click the fullscreen button located on the map's right top corner.\n        </Alert>\n  \n        <Map latitude={this.state.latitude} longitude={this.state.longitude} > \n        \n        </Map>\n\n      </div>\n\n      );\n\n    }\n\n\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}